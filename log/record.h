/**
 * @file
 *
 * @brief Log support for network simulation frameworks.
 *
 * @version 1.0
 * @author  Fuzzier Tang <gauchyler@gmail.com>
 * @date    2015-02-16
 *
 * @copyright Copyright (c) 2015.
 *            National Key Laboratory of Science and Technology on Communications,
 *            University of Electronic Science and Technology of China.
 *            All rights reserved.
 */

#ifndef RECORD_H__27491AE4_C2CF_4F26_BC06_B9C70D297396
#define RECORD_H__27491AE4_C2CF_4F26_BC06_B9C70D297396


#include <nsfx/log/config.h>
#include <nsfx/log/attribute-value.h>
#include <nsfx/log/attribute.h>


NSFX_LOG_OPEN_NAMESPACE


////////////////////////////////////////////////////////////////////////////////
/**
 * @ingroup Log
 *
 * @brief Log record.
 *
 * A log record carries a set of attributes, such as
 * 1) a severity level
 * 2) a message
 * 3) a timestamp
 * 4) the file name
 * 5) the line number
 * 6) the function name
 * 7) a scope name
 */
class Record
{
public:
    Record(void) NSFX_NOEXCEPT {}

    Record(const Attributes& attributes)
    {
        Insert(attributes);
    }

    // Non-copyable.
private:
#if NSFX_HAS_DELETE
    Record(const Record&) = delete;
    Record& operator=(const Record&) = delete;
#else // !NSFX_HAS_DELETE
    Record(const Record&) {}
    void operator=(const Record&) {}
#endif // NSFX_HAS_DELETE


    // Movable.
public:
    Record(Record&& rhs) :
        values_(std::move(rhs.values_))
    {
    }

    Record& operator=(Record&& rhs)
    {
        if (this != &rhs)
        {
            values_ = std::move(rhs.values_);
        }
        return *this;
    }



    // Methods.
public:
    /**
     * @brief Insert an attribute value.
     * @return Return \c true if the value is successfully inserted. If there's
     *         already an attribute value associated with the same name, this
     *         function returns \c false.
     */
    template<class StringT>
    bool Insert(const StringT& name, const AttributeValue& value)
    {
#ifdef NFSX_HAS_EMPLACE
        auto result = values_.emplace(name, value);
#else // !(NFSX_HAS_EMPLACE)
        auto result = values_.insert(std::make_pair(name, value));
#endif // NFSX_HAS_EMPLACE
        return result.second;
    }

    /**
     * @brief Insert attribute values generated by a set of attributes.
     */
    void Insert(const Attributes attributes)
    {
        for (auto it = attributes.cbegin(); it != attributes.cend(); ++it)
        {
            Insert(it->first, it->second.GetValue());
        }
    }

    /**
     * @brief Retrieve attribute value by using a type dispatcher.
     *
     * @param name The name of the attribute value.
     * @param dispatcher The type dispatcher.
     *
     * @return Returns \c true if the value is successfully dispatched.
     */
    bool Dispatch(const std::string& name,
                  const TypeDispatcher& dispatcher) const
    {
        bool result = false;
        auto it = values_.find(name);
        if (it != values_.cend())
        {
            const AttributeValue& v = it->second;
            result = v.Dispatch(dispatcher);
        }
        return result;
    }



    // Properties.
private:
    AttributeValues values_;


}; // class Record


NSFX_LOG_CLOSE_NAMESPACE


#endif // RECORD_H__27491AE4_C2CF_4F26_BC06_B9C70D297396

